<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ian Watkins</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Ian Watkins</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 24 May 2025 14:42:37 -0400</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Sales Mindset</title>
      <link>http://localhost:1313/sales/sales-mindset/</link>
      <pubDate>Sat, 24 May 2025 14:42:37 -0400</pubDate>
      <guid>http://localhost:1313/sales/sales-mindset/</guid>
      <description>&lt;h3 id=&#34;mindset-is-everything&#34;&gt;Mindset is &lt;em&gt;everything&lt;/em&gt;.&lt;/h3&gt;&#xA;&lt;p&gt;Sales is arguably a mindset game and &lt;strong&gt;most&lt;/strong&gt; salespeople get it wrong.&lt;/p&gt;&#xA;&lt;p&gt;Let me tell you why&amp;hellip;&lt;/p&gt;&#xA;&lt;p&gt;Most sales reps I have spoken to over the last decade have told me that the reason they went into sales to begin with is to &lt;strong&gt;&lt;em&gt;make more money&lt;/em&gt;&lt;/strong&gt;. There&amp;rsquo;s no doubt that making commission is a massive upside to working in sales - but the issue arises when the initial motivation becomes the focus of your daily mindset.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Better Tasks</title>
      <link>http://localhost:1313/projects/better-tasks/</link>
      <pubDate>Thu, 22 May 2025 07:14:21 -0400</pubDate>
      <guid>http://localhost:1313/projects/better-tasks/</guid>
      <description>&lt;h1 id=&#34;better-tasks-neovim-plugin&#34;&gt;Better Tasks Neovim Plugin&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;Better Tasks&lt;/strong&gt; is a lightweight, modular and opinionated Neovim plugin for managing Markdown-based task lists across your notes, journals, or project files. It adds intuitive task management commands, persistent storage, status highlighting, and upcoming fuzzy-finding and popup UIs.&lt;/p&gt;&#xA;&lt;p&gt;As always, you can find out more about this &lt;a href=&#34;https://github.com/MistbornOne/better-tasks.nvim&#34;&gt;project&lt;/a&gt; and all my projects in my &lt;a href=&#34;https://github.com/MistbornOne&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-task-structure&#34;&gt;💡 Task Structure&lt;/h2&gt;&#xA;&lt;p&gt;As you can see below, the tasks can be formatted into a table-like structure (not truly a table due to markdown limitations) that allow you to quickly see your tasks at a glance and view them through the perspective of title, due date, category, or status.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Agentic AI</title>
      <link>http://localhost:1313/coding/agentic-ai/</link>
      <pubDate>Thu, 22 May 2025 07:07:03 -0400</pubDate>
      <guid>http://localhost:1313/coding/agentic-ai/</guid>
      <description>&lt;h2 id=&#34;agentic-ai&#34;&gt;Agentic AI&lt;/h2&gt;&#xA;&lt;p&gt;Agentic AI is essentially giving AI a specific job that it will execute on a regular basis and giving it the autonomy to do so.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;There are five main categories of agentic AI today:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Simple Reflex&lt;/li&gt;&#xA;&lt;li&gt;Model-Based Reflex&lt;/li&gt;&#xA;&lt;li&gt;Goal-Based&lt;/li&gt;&#xA;&lt;li&gt;Utility-Based&lt;/li&gt;&#xA;&lt;li&gt;Learning&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;simple-reflex-agents&#34;&gt;Simple Reflex Agents&lt;/h3&gt;&#xA;&lt;p&gt;The most basic agentic AI models are &lt;em&gt;reactive&lt;/em&gt; and are built to analyze an input from the environment then use condition based logic/rules to make a decision on what to do next. For instance, your thermostat has a sensor that evaluates the temperature of the air (environmental input) and checks it against the conditional rules (if the temp is above 72 degrees F, then turn on cooling until it reaches 72 degrees). Once it evaluates the data against the conditional logic, it performs an action.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Functions</title>
      <link>http://localhost:1313/coding/functions/</link>
      <pubDate>Tue, 13 May 2025 20:16:42 -0400</pubDate>
      <guid>http://localhost:1313/coding/functions/</guid>
      <description>&lt;p&gt;&lt;strong&gt;What Are Functions?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Functions are blocks of code that perform a given task any time they are called.&lt;/p&gt;&#xA;&lt;p&gt;A function could process one action a single time and move on to the next block of code in the script, or it could iterate through itself multiple times (infinitely if you wrote it that way).&lt;/p&gt;&#xA;&lt;p&gt;In Python, your declare a function with the reserved keyword &lt;code&gt;def&lt;/code&gt; - which &lt;em&gt;defines&lt;/em&gt; the function.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Inkdrop Habit Tracker</title>
      <link>http://localhost:1313/projects/inkdrop-habit-tracker/</link>
      <pubDate>Sun, 11 May 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/inkdrop-habit-tracker/</guid>
      <description>&lt;h2 id=&#34;inkdrop-habit-tracker&#34;&gt;Inkdrop Habit Tracker&lt;/h2&gt;&#xA;&lt;p&gt;As a long time user of Notion, I fell in love with the idea of using my notes app to also keep track of my tasks and daily habits. After making the switch to &lt;a href=&#34;https://www.inkdrop.app&#34;&gt;Inkdrop&lt;/a&gt; for my main notetaking application, I wanted to have the same capability - so I made this plugin!&lt;/p&gt;&#xA;&lt;p&gt;I hope this is useful to the community and it&amp;rsquo;s my great pleasure to continue learning through contributing to an amazing tool.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Types in Python</title>
      <link>http://localhost:1313/coding/types-in-python/</link>
      <pubDate>Fri, 09 May 2025 19:41:43 -0400</pubDate>
      <guid>http://localhost:1313/coding/types-in-python/</guid>
      <description>&lt;h2 id=&#34;type&#34;&gt;Type()&lt;/h2&gt;&#xA;&lt;p&gt;In Python you can check for what type of variable you are dealing with by using the type() formula. It takes one input and tells you what type of variable it is.&lt;/p&gt;&#xA;&lt;p&gt;See below:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; num &lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ef9f76&#34;&gt;3&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; num_str &lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#99d1db&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ef9f76&#34;&gt;True&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; num_float &lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ef9f76&#34;&gt;3.0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#99d1db&#34;&gt;type&lt;/span&gt;(num)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ca9ee6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#e78284&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e5c890&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#39;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#99d1db&#34;&gt;type&lt;/span&gt;(num_str)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ca9ee6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#e78284&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e5c890&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#39;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#99d1db&#34;&gt;type&lt;/span&gt;(&lt;span style=&#34;color:#99d1db&#34;&gt;bool&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ca9ee6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#e78284&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e5c890&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#39;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#99d1db&#34;&gt;type&lt;/span&gt;(num_float)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ca9ee6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#e78284&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e5c890&#34;&gt;float&lt;/span&gt;&lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#39;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;p&gt;In the example above, we see that the function returns what class the variable belongs to. This can be very useful if you are trying to debug existing code that has variables written somewhere other than where you are looking or trying to fix the bug.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pure Functions</title>
      <link>http://localhost:1313/coding/pure-functions/</link>
      <pubDate>Tue, 06 May 2025 06:58:59 -0400</pubDate>
      <guid>http://localhost:1313/coding/pure-functions/</guid>
      <description>&lt;h2 id=&#34;pure-functions&#34;&gt;Pure Functions&lt;/h2&gt;&#xA;&lt;p&gt;Pure functions are functions that return the same result every time, assuming they receive the same inputs. This is made possible by writing the function to be self-contained, meaning it doesn&amp;rsquo;t rely on variables outside it&amp;rsquo;s local scope.&lt;/p&gt;&#xA;&lt;p&gt;Pure functions &lt;em&gt;do not&lt;/em&gt; change the external state of the program. They are great for keeping clean code that is easy to debug, but you can&amp;rsquo;t write an entire program of pure functions, because it wouldn&amp;rsquo;t actually do anything.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Variables</title>
      <link>http://localhost:1313/coding/variables/</link>
      <pubDate>Sun, 04 May 2025 14:17:36 -0400</pubDate>
      <guid>http://localhost:1313/coding/variables/</guid>
      <description>&lt;h2 id=&#34;what-are-variables&#34;&gt;What Are Variables?&lt;/h2&gt;&#xA;&lt;p&gt;If you are brand new to coding, the term &lt;em&gt;variables&lt;/em&gt; might not immediately register. It&amp;rsquo;s important to understand what a variable is, as most coding languages do use them.&lt;/p&gt;&#xA;&lt;h3 id=&#34;so-what-are-variables&#34;&gt;So What Are Variables?&lt;/h3&gt;&#xA;&lt;p&gt;Variables are &lt;em&gt;containers that store values&lt;/em&gt;, such as:&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Numbers:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Integers (3)&lt;/li&gt;&#xA;&lt;li&gt;Float (3.0)&lt;/li&gt;&#xA;&lt;li&gt;String (&amp;ldquo;3&amp;rdquo;)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;Text:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Strings are plain text and are wrapped in parenthesis to tell Python to interpret the text as text only. &amp;ldquo;For example, this would be a string&amp;rdquo;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;Boolean:&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bookbot</title>
      <link>http://localhost:1313/projects/bookbot/</link>
      <pubDate>Sun, 04 May 2025 08:46:30 -0400</pubDate>
      <guid>http://localhost:1313/projects/bookbot/</guid>
      <description>&lt;h2 id=&#34;bookbot-project&#34;&gt;Bookbot Project&lt;/h2&gt;&#xA;&lt;p&gt;The first real CLI project that I built was a tool which receives a .txt file as input and prints out some data. While this isn&amp;rsquo;t the most impressive program ever built, it means a lot to me, because it was the project that proved to me &lt;em&gt;I can do this&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Below is an example, using Mary Shelley&amp;rsquo;s &lt;em&gt;Frankenstein&lt;/em&gt;:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;============&lt;/span&gt; &lt;span style=&#34;color:#f2d5cf&#34;&gt;BOOKBOT&lt;/span&gt; &lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;============&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Analyzing book found at books/frankenstein.txt...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;----------- Word Count ----------&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Found &lt;span style=&#34;color:#ef9f76&#34;&gt;75767&lt;/span&gt; total words&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--------- Character Count -------&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;e: &lt;span style=&#34;color:#ef9f76&#34;&gt;44538&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;t: &lt;span style=&#34;color:#ef9f76&#34;&gt;29493&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a: &lt;span style=&#34;color:#ef9f76&#34;&gt;25894&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;o: &lt;span style=&#34;color:#ef9f76&#34;&gt;24494&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;i: &lt;span style=&#34;color:#ef9f76&#34;&gt;23927&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;n: &lt;span style=&#34;color:#ef9f76&#34;&gt;23643&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;s: &lt;span style=&#34;color:#ef9f76&#34;&gt;20360&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;r: &lt;span style=&#34;color:#ef9f76&#34;&gt;20079&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;h: &lt;span style=&#34;color:#ef9f76&#34;&gt;19176&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;d: &lt;span style=&#34;color:#ef9f76&#34;&gt;16318&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;l: &lt;span style=&#34;color:#ef9f76&#34;&gt;12306&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;m: &lt;span style=&#34;color:#ef9f76&#34;&gt;10206&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;u: &lt;span style=&#34;color:#ef9f76&#34;&gt;10111&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;c: &lt;span style=&#34;color:#ef9f76&#34;&gt;9011&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f: &lt;span style=&#34;color:#ef9f76&#34;&gt;8451&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;y: &lt;span style=&#34;color:#ef9f76&#34;&gt;7756&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;w: &lt;span style=&#34;color:#ef9f76&#34;&gt;7450&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p: &lt;span style=&#34;color:#ef9f76&#34;&gt;5952&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;g: &lt;span style=&#34;color:#ef9f76&#34;&gt;5795&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;b: &lt;span style=&#34;color:#ef9f76&#34;&gt;4868&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;v: &lt;span style=&#34;color:#ef9f76&#34;&gt;3737&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;k: &lt;span style=&#34;color:#ef9f76&#34;&gt;1661&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x: &lt;span style=&#34;color:#ef9f76&#34;&gt;691&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;j: &lt;span style=&#34;color:#ef9f76&#34;&gt;497&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;q: &lt;span style=&#34;color:#ef9f76&#34;&gt;325&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;z: &lt;span style=&#34;color:#ef9f76&#34;&gt;235&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;æ: &lt;span style=&#34;color:#ef9f76&#34;&gt;28&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;â: &lt;span style=&#34;color:#ef9f76&#34;&gt;8&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ê: &lt;span style=&#34;color:#ef9f76&#34;&gt;7&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ë: &lt;span style=&#34;color:#ef9f76&#34;&gt;2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ô: &lt;span style=&#34;color:#f2d5cf&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;=============&lt;/span&gt; &lt;span style=&#34;color:#f2d5cf&#34;&gt;END&lt;/span&gt; &lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;===============&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;p&gt;I may come back to this later and add some other features. I&amp;rsquo;ve considered adding additional file types to be analyzed and building in more data types to be returned.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Snake Game</title>
      <link>http://localhost:1313/projects/snake/</link>
      <pubDate>Sun, 04 May 2025 08:46:30 -0400</pubDate>
      <guid>http://localhost:1313/projects/snake/</guid>
      <description>&lt;h2 id=&#34;the-snake-game&#34;&gt;The Snake Game&lt;/h2&gt;&#xA;&lt;p&gt;A classic game from the early days of desktop computing, the snake game is a lot of nostalgia packed into a small screen.  I completed the asteroids game for Boot.dev and wanted to take on my first decent sized project all on my own, so I dove right in.&lt;/p&gt;&#xA;&lt;p&gt;This took me about 3 hours or so of solid coding split between two evenings, but with some clever Googling and GPT prompts, I was able to figure out anything that I didn&amp;rsquo;t understand on my own.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hugo Script</title>
      <link>http://localhost:1313/coding/hugo-script/</link>
      <pubDate>Fri, 02 May 2025 20:40:33 -0400</pubDate>
      <guid>http://localhost:1313/coding/hugo-script/</guid>
      <description>&lt;h2 id=&#34;shell-script---create-a-new-hugo-blog-post&#34;&gt;Shell Script - Create A New Hugo Blog Post&lt;/h2&gt;&#xA;&lt;p&gt;I&amp;rsquo;ve recently been going deep in the world of creating shell scripts to automate tasks as I operate in the shell. I&amp;rsquo;ve seen other developers fly around the terminal like some kind of wizard 🧙🏼‍♂️, their hands never leaving the keyboard.&lt;/p&gt;&#xA;&lt;p&gt;I am no stranger to using keyboard shortcuts to accomplish tasks in other apps I&amp;rsquo;ve used for years in my sales career and content creation, but the terminal is a new environment for me. I&amp;rsquo;ve really enjoyed learning to navigate and use CLI tools to accomplish tasks&amp;hellip; and edit in my text editor of choice, Neovim. However, after a month of typing out the same commands over and over in full, I decided to teach myself to write shell scripts.&lt;/p&gt;</description>
    </item>
    <item>
      <title>About</title>
      <link>http://localhost:1313/about/about/</link>
      <pubDate>Fri, 02 May 2025 17:33:39 -0400</pubDate>
      <guid>http://localhost:1313/about/about/</guid>
      <description>&lt;h2 id=&#34;hey-im-ian&#34;&gt;Hey!  I&amp;rsquo;m Ian&lt;/h2&gt;&#xA;&lt;p&gt;Dad of 5 humans and 3 dogs who loves a good cup of coffee and an even better book. Follower of Jesus. Major Nerd.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Asteroids</title>
      <link>http://localhost:1313/projects/asteroids/</link>
      <pubDate>Fri, 02 May 2025 17:24:47 -0400</pubDate>
      <guid>http://localhost:1313/projects/asteroids/</guid>
      <description>&lt;p&gt;One of my first &lt;code&gt;Python&lt;/code&gt; projects was to build a CLI version of the classic game Asteroids.&lt;/p&gt;&#xA;&lt;p&gt;You can find it &lt;a href=&#34;https://github.com/MistbornOne/bootdev-asteroids&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hello, World!</title>
      <link>http://localhost:1313/coding/hello-world/</link>
      <pubDate>Fri, 02 May 2025 17:01:16 -0400</pubDate>
      <guid>http://localhost:1313/coding/hello-world/</guid>
      <description>&lt;h2 id=&#34;your-first-bit-of-code&#34;&gt;Your First Bit of Code&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Everyone&lt;/strong&gt; starts with the first program that was ever ran on a computer with a visual interface:&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Hello, World!&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;The purpose of the program is to tell the Python interperter to show &amp;ldquo;Hello World&amp;rdquo; on the screen.&lt;/p&gt;&#xA;&lt;p&gt;Go to your terminal and type the following to check for Python:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python3 --version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you get an error, be sure to install it. On MacOS, I recommend HomeBrew, but you can use your package installer of choice. For HomeBrew, do the following:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Welcome 👋🏼</title>
      <link>http://localhost:1313/coding/welcome/</link>
      <pubDate>Fri, 02 May 2025 15:45:52 -0400</pubDate>
      <guid>http://localhost:1313/coding/welcome/</guid>
      <description>&lt;h2 id=&#34;welcome-to-my-blog-and-porfolio&#34;&gt;Welcome To My Blog And Porfolio!&lt;/h2&gt;&#xA;&lt;h5 id=&#34;my-personal-journey-to-becoming-a-developer-from-ground-zero&#34;&gt;My personal journey to becoming a developer from ground zero.&lt;/h5&gt;&#xA;&lt;p&gt;&lt;strong&gt;A Little History&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;      I have had a love for learning languages for as long as I can remember. I lived in Okinawa, Japan for the first five years of my life. Being exposed to multiple languages while I was acquiring my ability to communicate verbally seems to have unlocked a lifelong fascination with becoming a polyglot.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
