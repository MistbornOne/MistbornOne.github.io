<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Beginner on Ian Watkins</title>
    <link>http://localhost:1313/tags/beginner/</link>
    <description>Recent content in Beginner on Ian Watkins</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 13 May 2025 20:16:42 -0400</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/beginner/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Functions</title>
      <link>http://localhost:1313/posts/functions/</link>
      <pubDate>Tue, 13 May 2025 20:16:42 -0400</pubDate>
      <guid>http://localhost:1313/posts/functions/</guid>
      <description>&lt;p&gt;&lt;strong&gt;What Are Functions?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Functions are blocks of code that perform a given task any time they are called.&lt;/p&gt;&#xA;&lt;p&gt;A function could process one action a single time and move on to the next block of code in the script, or it could iterate through itself multiple times (infinitely if you wrote it that way).&lt;/p&gt;&#xA;&lt;p&gt;In Python, your declare a function with the reserved keyword &lt;code&gt;def&lt;/code&gt; - which &lt;em&gt;defines&lt;/em&gt; the function.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Types in Python</title>
      <link>http://localhost:1313/posts/types-in-python/</link>
      <pubDate>Fri, 09 May 2025 19:41:43 -0400</pubDate>
      <guid>http://localhost:1313/posts/types-in-python/</guid>
      <description>&lt;h2 id=&#34;type&#34;&gt;Type()&lt;/h2&gt;&#xA;&lt;p&gt;In Python you can check for what type of variable you are dealing with by using the type() formula. It takes one input and tells you what type of variable it is.&lt;/p&gt;&#xA;&lt;p&gt;See below:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; num &lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ef9f76&#34;&gt;3&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; num_str &lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#99d1db&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ef9f76&#34;&gt;True&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; num_float &lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ef9f76&#34;&gt;3.0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#99d1db&#34;&gt;type&lt;/span&gt;(num)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ca9ee6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#e78284&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e5c890&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#39;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#99d1db&#34;&gt;type&lt;/span&gt;(num_str)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ca9ee6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#e78284&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e5c890&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#39;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#99d1db&#34;&gt;type&lt;/span&gt;(&lt;span style=&#34;color:#99d1db&#34;&gt;bool&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ca9ee6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#e78284&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e5c890&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#39;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#99d1db&#34;&gt;type&lt;/span&gt;(num_float)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ca9ee6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#e78284&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e5c890&#34;&gt;float&lt;/span&gt;&lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#39;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;p&gt;In the example above, we see that the function returns what class the variable belongs to. This can be very useful if you are trying to debug existing code that has variables written somewhere other than where you are looking or trying to fix the bug.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Variables</title>
      <link>http://localhost:1313/posts/variables/</link>
      <pubDate>Sun, 04 May 2025 14:17:36 -0400</pubDate>
      <guid>http://localhost:1313/posts/variables/</guid>
      <description>&lt;h2 id=&#34;what-are-variables&#34;&gt;What Are Variables?&lt;/h2&gt;&#xA;&lt;p&gt;If you are brand new to coding, the term &lt;em&gt;variables&lt;/em&gt; might not immediately register. It&amp;rsquo;s important to understand what a variable is, as most coding languages do use them.&lt;/p&gt;&#xA;&lt;h3 id=&#34;so-what-are-variables&#34;&gt;So What Are Variables?&lt;/h3&gt;&#xA;&lt;p&gt;Variables are &lt;em&gt;containers that store values&lt;/em&gt;, such as:&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Numbers:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Integers (3)&lt;/li&gt;&#xA;&lt;li&gt;Float (3.0)&lt;/li&gt;&#xA;&lt;li&gt;String (&amp;ldquo;3&amp;rdquo;)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;Text:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Strings are plain text and are wrapped in parenthesis to tell Python to interpret the text as text only. &amp;ldquo;For example, this would be a string&amp;rdquo;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;Boolean:&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hello, World!</title>
      <link>http://localhost:1313/posts/hello-world/</link>
      <pubDate>Fri, 02 May 2025 17:01:16 -0400</pubDate>
      <guid>http://localhost:1313/posts/hello-world/</guid>
      <description>&lt;h2 id=&#34;your-first-bit-of-code&#34;&gt;Your First Bit of Code&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Everyone&lt;/strong&gt; starts with the first program that was ever ran on a computer with a visual interface:&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Hello, World!&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;The purpose of the program is to tell the Python interperter to show &amp;ldquo;Hello World&amp;rdquo; on the screen.&lt;/p&gt;&#xA;&lt;p&gt;Go to your terminal and type the following to check for Python:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python3 --version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you get an error, be sure to install it. On MacOS, I recommend HomeBrew, but you can use your package installer of choice. For HomeBrew, do the following:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
